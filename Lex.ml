# 1 "Lex.mll"
 
open Ast
open Parse
open Lexing
exception Eof

(* gere les positions numero de ligne + decalage dans la ligne *)
let next_line lexbuf = Lexing.new_line lexbuf

(* cree une table de hachage qu'on remplit avec le token associe
 * a chaque mot-clef
 *)
let keyword_table = Hashtbl.create 16
let _ =
  List.iter
    (fun (kwd, tok) -> Hashtbl.add keyword_table kwd tok)
    [ "if", IF;
      "then", THEN;
      "else", ELSE;
      "class" , CLASSE;
      "super" , SUPER;
      "this" , THIS;
      (*"result", RESULT;*)
      "new", NEW;
      "var", VAR;
      "def", DEF;
      "is", IS;
      "static", STATIC;
      "override", OVERRIDE;
      "extends", EXTENDS
    ]

# 35 "Lex.ml"
let __ocaml_lex_tables = {
  Lexing.lex_base =
   "\000\000\252\255\253\255\254\255\000\000\255\255\001\000\002\000\
    \003\000\255\255\249\255\250\255\251\255\252\255\253\255\254\255\
    \089\000\227\255\228\255\230\255\000\000\001\000\236\255\237\255\
    \003\000\239\255\240\255\241\255\242\255\243\255\245\255\246\255\
    \247\255\248\255\001\000\003\000\251\255\252\255\000\000\194\000\
    \025\001\249\255\235\255\229\255\233\255\231\255";
  Lexing.lex_backtrk =
   "\255\255\255\255\255\255\255\255\003\000\255\255\255\255\007\000\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\023\000\021\000\255\255\255\255\
    \017\000\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\011\000\005\000\255\255\255\255\002\000\001\000\
    \000\000\255\255\255\255\255\255\255\255\255\255";
  Lexing.lex_default =
   "\001\000\000\000\000\000\000\000\255\255\000\000\007\000\007\000\
    \255\255\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \017\000\000\000\000\000\000\000\255\255\255\255\000\000\000\000\
    \255\255\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\255\255\255\255\000\000\000\000\255\255\255\255\
    \255\255\000\000\000\000\000\000\000\000\000\000";
  Lexing.lex_trans =
   "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\038\000\003\000\000\000\000\000\038\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \038\000\000\000\000\000\009\000\255\255\000\000\000\000\000\000\
    \000\000\000\000\004\000\041\000\000\000\000\000\000\000\005\000\
    \000\000\000\000\015\000\035\000\035\000\035\000\035\000\035\000\
    \035\000\035\000\035\000\035\000\035\000\045\000\044\000\043\000\
    \042\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\008\000\255\255\014\000\
    \000\000\000\000\038\000\037\000\000\000\013\000\038\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\012\000\000\000\000\000\000\000\011\000\000\000\010\000\
    \000\000\038\000\000\000\036\000\000\000\000\000\000\000\032\000\
    \000\000\029\000\028\000\030\000\033\000\023\000\031\000\022\000\
    \034\000\035\000\035\000\035\000\035\000\035\000\035\000\035\000\
    \035\000\035\000\035\000\024\000\025\000\021\000\019\000\020\000\
    \000\000\000\000\040\000\040\000\040\000\040\000\040\000\040\000\
    \040\000\040\000\040\000\040\000\040\000\040\000\040\000\040\000\
    \040\000\040\000\040\000\040\000\040\000\040\000\040\000\040\000\
    \040\000\040\000\040\000\040\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\039\000\039\000\039\000\039\000\039\000\039\000\
    \039\000\039\000\039\000\039\000\039\000\039\000\039\000\039\000\
    \039\000\039\000\039\000\039\000\039\000\039\000\039\000\039\000\
    \039\000\039\000\039\000\039\000\027\000\000\000\026\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\039\000\039\000\039\000\039\000\039\000\039\000\
    \039\000\039\000\039\000\039\000\000\000\000\000\000\000\000\000\
    \002\000\255\255\255\255\039\000\039\000\039\000\039\000\039\000\
    \039\000\039\000\039\000\039\000\039\000\039\000\039\000\039\000\
    \039\000\039\000\039\000\039\000\039\000\039\000\039\000\039\000\
    \039\000\039\000\039\000\039\000\039\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\039\000\039\000\039\000\039\000\039\000\
    \039\000\039\000\039\000\039\000\039\000\039\000\039\000\039\000\
    \039\000\039\000\039\000\039\000\039\000\039\000\039\000\039\000\
    \039\000\039\000\039\000\039\000\039\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\040\000\040\000\040\000\040\000\040\000\040\000\040\000\
    \040\000\040\000\040\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\018\000\040\000\040\000\040\000\040\000\040\000\040\000\
    \040\000\040\000\040\000\040\000\040\000\040\000\040\000\040\000\
    \040\000\040\000\040\000\040\000\040\000\040\000\040\000\040\000\
    \040\000\040\000\040\000\040\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\040\000\040\000\040\000\040\000\040\000\040\000\
    \040\000\040\000\040\000\040\000\040\000\040\000\040\000\040\000\
    \040\000\040\000\040\000\040\000\040\000\040\000\040\000\040\000\
    \040\000\040\000\040\000\040\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000";
  Lexing.lex_check =
   "\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\038\000\000\000\255\255\255\255\038\000\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \038\000\255\255\255\255\006\000\007\000\255\255\255\255\255\255\
    \255\255\255\255\000\000\034\000\255\255\255\255\255\255\004\000\
    \255\255\255\255\008\000\035\000\035\000\035\000\035\000\035\000\
    \035\000\035\000\035\000\035\000\035\000\020\000\021\000\021\000\
    \024\000\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\006\000\007\000\008\000\
    \255\255\255\255\016\000\016\000\255\255\008\000\016\000\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\008\000\255\255\255\255\255\255\008\000\255\255\008\000\
    \255\255\016\000\255\255\016\000\255\255\255\255\255\255\016\000\
    \255\255\016\000\016\000\016\000\016\000\016\000\016\000\016\000\
    \016\000\016\000\016\000\016\000\016\000\016\000\016\000\016\000\
    \016\000\016\000\016\000\016\000\016\000\016\000\016\000\016\000\
    \255\255\255\255\016\000\016\000\016\000\016\000\016\000\016\000\
    \016\000\016\000\016\000\016\000\016\000\016\000\016\000\016\000\
    \016\000\016\000\016\000\016\000\016\000\016\000\016\000\016\000\
    \016\000\016\000\016\000\016\000\255\255\255\255\255\255\255\255\
    \255\255\255\255\016\000\016\000\016\000\016\000\016\000\016\000\
    \016\000\016\000\016\000\016\000\016\000\016\000\016\000\016\000\
    \016\000\016\000\016\000\016\000\016\000\016\000\016\000\016\000\
    \016\000\016\000\016\000\016\000\016\000\255\255\016\000\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\039\000\039\000\039\000\039\000\039\000\039\000\
    \039\000\039\000\039\000\039\000\255\255\255\255\255\255\255\255\
    \000\000\006\000\007\000\039\000\039\000\039\000\039\000\039\000\
    \039\000\039\000\039\000\039\000\039\000\039\000\039\000\039\000\
    \039\000\039\000\039\000\039\000\039\000\039\000\039\000\039\000\
    \039\000\039\000\039\000\039\000\039\000\255\255\255\255\255\255\
    \255\255\255\255\255\255\039\000\039\000\039\000\039\000\039\000\
    \039\000\039\000\039\000\039\000\039\000\039\000\039\000\039\000\
    \039\000\039\000\039\000\039\000\039\000\039\000\039\000\039\000\
    \039\000\039\000\039\000\039\000\039\000\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\040\000\040\000\040\000\040\000\040\000\040\000\040\000\
    \040\000\040\000\040\000\255\255\255\255\255\255\255\255\255\255\
    \255\255\016\000\040\000\040\000\040\000\040\000\040\000\040\000\
    \040\000\040\000\040\000\040\000\040\000\040\000\040\000\040\000\
    \040\000\040\000\040\000\040\000\040\000\040\000\040\000\040\000\
    \040\000\040\000\040\000\040\000\255\255\255\255\255\255\255\255\
    \255\255\255\255\040\000\040\000\040\000\040\000\040\000\040\000\
    \040\000\040\000\040\000\040\000\040\000\040\000\040\000\040\000\
    \040\000\040\000\040\000\040\000\040\000\040\000\040\000\040\000\
    \040\000\040\000\040\000\040\000\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255";
  Lexing.lex_base_code =
   "";
  Lexing.lex_backtrk_code =
   "";
  Lexing.lex_default_code =
   "";
  Lexing.lex_trans_code =
   "";
  Lexing.lex_check_code =
   "";
  Lexing.lex_code =
   "";
}

let rec comment lexbuf =
   __ocaml_lex_comment_rec lexbuf 0
and __ocaml_lex_comment_rec lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 41 "Lex.mll"
                  ( (* fin de commentaire trouvee. Le commentaire ne doit pas
                     * etre transmis. On renvoie donc ce que nous renverra un
                     * nouvel appel a l'analyseur lexical
                     *)
                    token lexbuf
                  )
# 222 "Lex.ml"

  | 1 ->
# 47 "Lex.mll"
                   ( (* incremente le compteur de ligne et poursuit la
                      * reconnaissance du commentaire en cours
                      *)
                     new_line lexbuf; comment lexbuf
                   )
# 231 "Lex.ml"

  | 2 ->
# 52 "Lex.mll"
                   ( (* detecte les commentaires non fermes pour pouvoir
                      * faire un message d'erreur clair.
                      * On pourrait stocker la position du dernier commentaire
                      * encore ouvert pour ameliorer le dioagnostic
                      *)
                     raise (MISC_Error "unclosed comment")
                   )
# 242 "Lex.ml"

  | 3 ->
# 59 "Lex.mll"
                   ( (* rien a faire de special pour ce caractere, donc on
                      * poursuit la reconnaissance du commentaire en cours
                      *)
                     comment lexbuf
                   )
# 251 "Lex.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf;
      __ocaml_lex_comment_rec lexbuf __ocaml_lex_state

and read_string buf lexbuf =
   __ocaml_lex_read_string_rec buf lexbuf 6
and __ocaml_lex_read_string_rec buf lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 66 "Lex.mll"
              ( STRING (Buffer.contents buf) )
# 263 "Lex.ml"

  | 1 ->
# 67 "Lex.mll"
              ( Buffer.add_char buf '/'; read_string buf lexbuf )
# 268 "Lex.ml"

  | 2 ->
# 68 "Lex.mll"
              ( Buffer.add_char buf '\\'; read_string buf lexbuf )
# 273 "Lex.ml"

  | 3 ->
# 69 "Lex.mll"
              ( Buffer.add_char buf '\b'; read_string buf lexbuf )
# 278 "Lex.ml"

  | 4 ->
# 70 "Lex.mll"
              ( Buffer.add_char buf '\n'; read_string buf lexbuf )
# 283 "Lex.ml"

  | 5 ->
# 71 "Lex.mll"
              ( Buffer.add_char buf '\r'; read_string buf lexbuf )
# 288 "Lex.ml"

  | 6 ->
# 72 "Lex.mll"
              ( Buffer.add_char buf '\t'; read_string buf lexbuf )
# 293 "Lex.ml"

  | 7 ->
# 74 "Lex.mll"
    ( Buffer.add_string buf (Lexing.lexeme lexbuf);
      read_string buf lexbuf
    )
# 300 "Lex.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf;
      __ocaml_lex_read_string_rec buf lexbuf __ocaml_lex_state

and token lexbuf =
   __ocaml_lex_token_rec lexbuf 16
and __ocaml_lex_token_rec lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
let
# 83 "Lex.mll"
                 classe_name
# 313 "Lex.ml"
= Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_start_pos lexbuf.Lexing.lex_curr_pos in
# 83 "Lex.mll"
                             ( CLASSNAME classe_name )
# 317 "Lex.ml"

  | 1 ->
let
# 84 "Lex.mll"
                     id
# 323 "Lex.ml"
= Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_start_pos lexbuf.Lexing.lex_curr_pos in
# 85 "Lex.mll"
      ( (* id contient le texte reconnu. On verifie s'il s'agit d'un mot-clef
         * auquel cas on renvoie le token associe. Sinon on renvoie Id avec le
         * texte reconnu en valeur 
         *)
        try
          Hashtbl.find keyword_table id
        with Not_found -> ID id
      )
# 334 "Lex.ml"

  | 2 ->
# 95 "Lex.mll"
                    ( (* consommer les delimiteurs, ne pas les transmettre
                       * et renvoyer ce que renverra un nouvel appel a
                       *  l'analyseur lexical
                       *)
                       token lexbuf
                    )
# 344 "Lex.ml"

  | 3 ->
# 101 "Lex.mll"
             ( next_line lexbuf; token lexbuf)
# 349 "Lex.ml"

  | 4 ->
# 102 "Lex.mll"
             ( read_string (Buffer.create 17) lexbuf )
# 354 "Lex.ml"

  | 5 ->
let
# 103 "Lex.mll"
                lxm
# 360 "Lex.ml"
= Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_start_pos lexbuf.Lexing.lex_curr_pos in
# 103 "Lex.mll"
                    ( CSTE(int_of_string lxm) )
# 364 "Lex.ml"

  | 6 ->
# 104 "Lex.mll"
                   ( comment lexbuf )
# 369 "Lex.ml"

  | 7 ->
# 105 "Lex.mll"
                   ( PLUS )
# 374 "Lex.ml"

  | 8 ->
# 106 "Lex.mll"
                   (CONCAT)
# 379 "Lex.ml"

  | 9 ->
# 107 "Lex.mll"
                   ( MINUS )
# 384 "Lex.ml"

  | 10 ->
# 108 "Lex.mll"
                   ( TIMES )
# 389 "Lex.ml"

  | 11 ->
# 109 "Lex.mll"
                   ( DIV )
# 394 "Lex.ml"

  | 12 ->
# 110 "Lex.mll"
                   ( LPAREN )
# 399 "Lex.ml"

  | 13 ->
# 111 "Lex.mll"
                   ( RPAREN )
# 404 "Lex.ml"

  | 14 ->
# 112 "Lex.mll"
                   ( LBRACKET )
# 409 "Lex.ml"

  | 15 ->
# 113 "Lex.mll"
                   ( RBRACKET )
# 414 "Lex.ml"

  | 16 ->
# 114 "Lex.mll"
                   ( SEMICOLON )
# 419 "Lex.ml"

  | 17 ->
# 115 "Lex.mll"
                   ( COLON )
# 424 "Lex.ml"

  | 18 ->
# 116 "Lex.mll"
                   ( COMMA )
# 429 "Lex.ml"

  | 19 ->
# 117 "Lex.mll"
                   ( SELECTION )
# 434 "Lex.ml"

  | 20 ->
# 118 "Lex.mll"
                   ( ASSIGN )
# 439 "Lex.ml"

  | 21 ->
# 119 "Lex.mll"
                  ( RELOP (Ast.LT) )
# 444 "Lex.ml"

  | 22 ->
# 120 "Lex.mll"
                   ( RELOP (Ast.LE) )
# 449 "Lex.ml"

  | 23 ->
# 121 "Lex.mll"
                   ( RELOP (Ast.GT) )
# 454 "Lex.ml"

  | 24 ->
# 122 "Lex.mll"
                   ( RELOP (Ast.GE) )
# 459 "Lex.ml"

  | 25 ->
# 123 "Lex.mll"
                   ( RELOP (Ast.EQ) )
# 464 "Lex.ml"

  | 26 ->
# 124 "Lex.mll"
                   ( RELOP (Ast.NEQ) )
# 469 "Lex.ml"

  | 27 ->
# 125 "Lex.mll"
                   ( EOF )
# 474 "Lex.ml"

  | 28 ->
let
# 126 "Lex.mll"
         lxm
# 480 "Lex.ml"
= Lexing.sub_lexeme_char lexbuf lexbuf.Lexing.lex_start_pos in
# 126 "Lex.mll"
                   ( (* action par défaut: filtre un unique caractere, different
                      * de ceux qui precedent. Il s'agit d'un caratere errone:
                      * on le signale et on poursuit quand meme l'analyse.
                      * On aurait pu décider de lever une exception et
                      * arreter l'analyse.
                      *)
                     print_endline
                       ("undefined character: " ^ (String.make 1 lxm));
                     token lexbuf

  )
# 494 "Lex.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf;
      __ocaml_lex_token_rec lexbuf __ocaml_lex_state

;;

