State 0:
## Known stack suffix:
##
## LR(1) items:
prog' -> . prog [ # ]
## Transitions:
-- On CLASSE shift to state 1
-- On prog shift to state 156
-- On list(classe) shift to state 157
-- On classe shift to state 160
## Reductions:
-- On LBRACKET
--   reduce production list(classe) ->

State 1:
## Known stack suffix:
## CLASSE
## LR(1) items:
classe -> CLASSE . CLASSNAME factoredVarParamList option(extends) IS LBRACKET classBody RBRACKET [ LBRACKET CLASSE ]
## Transitions:
-- On CLASSNAME shift to state 2
## Reductions:

State 2:
## Known stack suffix:
## CLASSE CLASSNAME
## LR(1) items:
classe -> CLASSE CLASSNAME . factoredVarParamList option(extends) IS LBRACKET classBody RBRACKET [ LBRACKET CLASSE ]
## Transitions:
-- On LPAREN shift to state 3
-- On factoredVarParamList shift to state 21
## Reductions:

State 3:
## Known stack suffix:
## LPAREN
## LR(1) items:
factoredVarParamList -> LPAREN . loption(separated_nonempty_list(COMMA,factoredVarParam)) RPAREN [ IS EXTENDS COLON ]
## Transitions:
-- On VAR shift to state 4
-- On separated_nonempty_list(COMMA,factoredVarParam) shift to state 5
-- On loption(separated_nonempty_list(COMMA,factoredVarParam)) shift to state 6
-- On factoredVarParam shift to state 8
-- On boption(VAR) shift to state 11
## Reductions:
-- On ID COLON
--   reduce production boption(VAR) ->
-- On RPAREN
--   reduce production loption(separated_nonempty_list(COMMA,factoredVarParam)) ->

State 4:
## Known stack suffix:
## VAR
## LR(1) items:
boption(VAR) -> VAR . [ ID COLON ]
## Transitions:
## Reductions:
-- On ID COLON
--   reduce production boption(VAR) -> VAR

State 5:
## Known stack suffix:
## separated_nonempty_list(COMMA,factoredVarParam)
## LR(1) items:
loption(separated_nonempty_list(COMMA,factoredVarParam)) -> separated_nonempty_list(COMMA,factoredVarParam) . [ RPAREN ]
## Transitions:
## Reductions:
-- On RPAREN
--   reduce production loption(separated_nonempty_list(COMMA,factoredVarParam)) -> separated_nonempty_list(COMMA,factoredVarParam)

State 6:
## Known stack suffix:
## LPAREN loption(separated_nonempty_list(COMMA,factoredVarParam))
## LR(1) items:
factoredVarParamList -> LPAREN loption(separated_nonempty_list(COMMA,factoredVarParam)) . RPAREN [ IS EXTENDS COLON ]
## Transitions:
-- On RPAREN shift to state 7
## Reductions:

State 7:
## Known stack suffix:
## LPAREN loption(separated_nonempty_list(COMMA,factoredVarParam)) RPAREN
## LR(1) items:
factoredVarParamList -> LPAREN loption(separated_nonempty_list(COMMA,factoredVarParam)) RPAREN . [ IS EXTENDS COLON ]
## Transitions:
## Reductions:
-- On IS EXTENDS COLON
--   reduce production factoredVarParamList -> LPAREN loption(separated_nonempty_list(COMMA,factoredVarParam)) RPAREN

State 8:
## Known stack suffix:
## factoredVarParam
## LR(1) items:
separated_nonempty_list(COMMA,factoredVarParam) -> factoredVarParam . [ RPAREN ]
separated_nonempty_list(COMMA,factoredVarParam) -> factoredVarParam . COMMA separated_nonempty_list(COMMA,factoredVarParam) [ RPAREN ]
## Transitions:
-- On COMMA shift to state 9
## Reductions:
-- On RPAREN
--   reduce production separated_nonempty_list(COMMA,factoredVarParam) -> factoredVarParam

State 9:
## Known stack suffix:
## factoredVarParam COMMA
## LR(1) items:
separated_nonempty_list(COMMA,factoredVarParam) -> factoredVarParam COMMA . separated_nonempty_list(COMMA,factoredVarParam) [ RPAREN ]
## Transitions:
-- On VAR shift to state 4
-- On separated_nonempty_list(COMMA,factoredVarParam) shift to state 10
-- On factoredVarParam shift to state 8
-- On boption(VAR) shift to state 11
## Reductions:
-- On ID COLON
--   reduce production boption(VAR) ->

State 10:
## Known stack suffix:
## factoredVarParam COMMA separated_nonempty_list(COMMA,factoredVarParam)
## LR(1) items:
separated_nonempty_list(COMMA,factoredVarParam) -> factoredVarParam COMMA separated_nonempty_list(COMMA,factoredVarParam) . [ RPAREN ]
## Transitions:
## Reductions:
-- On RPAREN
--   reduce production separated_nonempty_list(COMMA,factoredVarParam) -> factoredVarParam COMMA separated_nonempty_list(COMMA,factoredVarParam)

State 11:
## Known stack suffix:
## boption(VAR)
## LR(1) items:
factoredVarParam -> boption(VAR) . loption(separated_nonempty_list(COMMA,ID)) COLON returnedType [ RPAREN COMMA ]
## Transitions:
-- On ID shift to state 12
-- On separated_nonempty_list(COMMA,ID) shift to state 15
-- On loption(separated_nonempty_list(COMMA,ID)) shift to state 16
## Reductions:
-- On COLON
--   reduce production loption(separated_nonempty_list(COMMA,ID)) ->

State 12:
## Known stack suffix:
## ID
## LR(1) items:
separated_nonempty_list(COMMA,ID) -> ID . [ COLON ]
separated_nonempty_list(COMMA,ID) -> ID . COMMA separated_nonempty_list(COMMA,ID) [ COLON ]
## Transitions:
-- On COMMA shift to state 13
## Reductions:
-- On COLON
--   reduce production separated_nonempty_list(COMMA,ID) -> ID

State 13:
## Known stack suffix:
## ID COMMA
## LR(1) items:
separated_nonempty_list(COMMA,ID) -> ID COMMA . separated_nonempty_list(COMMA,ID) [ COLON ]
## Transitions:
-- On ID shift to state 12
-- On separated_nonempty_list(COMMA,ID) shift to state 14
## Reductions:

State 14:
## Known stack suffix:
## ID COMMA separated_nonempty_list(COMMA,ID)
## LR(1) items:
separated_nonempty_list(COMMA,ID) -> ID COMMA separated_nonempty_list(COMMA,ID) . [ COLON ]
## Transitions:
## Reductions:
-- On COLON
--   reduce production separated_nonempty_list(COMMA,ID) -> ID COMMA separated_nonempty_list(COMMA,ID)

State 15:
## Known stack suffix:
## separated_nonempty_list(COMMA,ID)
## LR(1) items:
loption(separated_nonempty_list(COMMA,ID)) -> separated_nonempty_list(COMMA,ID) . [ COLON ]
## Transitions:
## Reductions:
-- On COLON
--   reduce production loption(separated_nonempty_list(COMMA,ID)) -> separated_nonempty_list(COMMA,ID)

State 16:
## Known stack suffix:
## boption(VAR) loption(separated_nonempty_list(COMMA,ID))
## LR(1) items:
factoredVarParam -> boption(VAR) loption(separated_nonempty_list(COMMA,ID)) . COLON returnedType [ RPAREN COMMA ]
## Transitions:
-- On COLON shift to state 17
## Reductions:

State 17:
## Known stack suffix:
## boption(VAR) loption(separated_nonempty_list(COMMA,ID)) COLON
## LR(1) items:
factoredVarParam -> boption(VAR) loption(separated_nonempty_list(COMMA,ID)) COLON . returnedType [ RPAREN COMMA ]
## Transitions:
-- On COLON shift to state 18
-- On returnedType shift to state 20
## Reductions:

State 18:
## Known stack suffix:
## COLON
## LR(1) items:
returnedType -> COLON . CLASSNAME [ VAR RPAREN RBRACKET IS DEF COMMA ASSIGN ]
## Transitions:
-- On CLASSNAME shift to state 19
## Reductions:

State 19:
## Known stack suffix:
## COLON CLASSNAME
## LR(1) items:
returnedType -> COLON CLASSNAME . [ VAR RPAREN RBRACKET IS DEF COMMA ASSIGN ]
## Transitions:
## Reductions:
-- On VAR RPAREN RBRACKET IS DEF COMMA ASSIGN
--   reduce production returnedType -> COLON CLASSNAME

State 20:
## Known stack suffix:
## boption(VAR) loption(separated_nonempty_list(COMMA,ID)) COLON returnedType
## LR(1) items:
factoredVarParam -> boption(VAR) loption(separated_nonempty_list(COMMA,ID)) COLON returnedType . [ RPAREN COMMA ]
## Transitions:
## Reductions:
-- On RPAREN COMMA
--   reduce production factoredVarParam -> boption(VAR) loption(separated_nonempty_list(COMMA,ID)) COLON returnedType

State 21:
## Known stack suffix:
## CLASSE CLASSNAME factoredVarParamList
## LR(1) items:
classe -> CLASSE CLASSNAME factoredVarParamList . option(extends) IS LBRACKET classBody RBRACKET [ LBRACKET CLASSE ]
## Transitions:
-- On EXTENDS shift to state 22
-- On option(extends) shift to state 24
-- On extends shift to state 155
## Reductions:
-- On IS
--   reduce production option(extends) ->

State 22:
## Known stack suffix:
## EXTENDS
## LR(1) items:
extends -> EXTENDS . CLASSNAME [ IS ]
## Transitions:
-- On CLASSNAME shift to state 23
## Reductions:

State 23:
## Known stack suffix:
## EXTENDS CLASSNAME
## LR(1) items:
extends -> EXTENDS CLASSNAME . [ IS ]
## Transitions:
## Reductions:
-- On IS
--   reduce production extends -> EXTENDS CLASSNAME

State 24:
## Known stack suffix:
## CLASSE CLASSNAME factoredVarParamList option(extends)
## LR(1) items:
classe -> CLASSE CLASSNAME factoredVarParamList option(extends) . IS LBRACKET classBody RBRACKET [ LBRACKET CLASSE ]
## Transitions:
-- On IS shift to state 25
## Reductions:

State 25:
## Known stack suffix:
## CLASSE CLASSNAME factoredVarParamList option(extends) IS
## LR(1) items:
classe -> CLASSE CLASSNAME factoredVarParamList option(extends) IS . LBRACKET classBody RBRACKET [ LBRACKET CLASSE ]
## Transitions:
-- On LBRACKET shift to state 26
## Reductions:

State 26:
## Known stack suffix:
## CLASSE CLASSNAME factoredVarParamList option(extends) IS LBRACKET
## LR(1) items:
classe -> CLASSE CLASSNAME factoredVarParamList option(extends) IS LBRACKET . classBody RBRACKET [ LBRACKET CLASSE ]
## Transitions:
-- On VAR shift to state 27
-- On DEF shift to state 35
-- On methode shift to state 143
-- On factoredAttributes shift to state 144
-- On constructor shift to state 145
-- On classBody shift to state 146
-- On anyClassDecl shift to state 148
-- On anyClDeclAndConstructor shift to state 150
## Reductions:

State 27:
## Known stack suffix:
## VAR
## LR(1) items:
factoredAttributes -> VAR . boption(STATIC) list(ID) COLON returnedType [ VAR RBRACKET DEF ]
## Transitions:
-- On STATIC shift to state 28
-- On boption(STATIC) shift to state 29
## Reductions:
-- On ID COLON
--   reduce production boption(STATIC) ->

State 28:
## Known stack suffix:
## STATIC
## LR(1) items:
boption(STATIC) -> STATIC . [ OVERRIDE ID COLON ]
## Transitions:
## Reductions:
-- On OVERRIDE ID COLON
--   reduce production boption(STATIC) -> STATIC

State 29:
## Known stack suffix:
## VAR boption(STATIC)
## LR(1) items:
factoredAttributes -> VAR boption(STATIC) . list(ID) COLON returnedType [ VAR RBRACKET DEF ]
## Transitions:
-- On ID shift to state 30
-- On list(ID) shift to state 32
## Reductions:
-- On COLON
--   reduce production list(ID) ->

State 30:
## Known stack suffix:
## ID
## LR(1) items:
list(ID) -> ID . list(ID) [ COLON ]
## Transitions:
-- On ID shift to state 30
-- On list(ID) shift to state 31
## Reductions:
-- On COLON
--   reduce production list(ID) ->

State 31:
## Known stack suffix:
## ID list(ID)
## LR(1) items:
list(ID) -> ID list(ID) . [ COLON ]
## Transitions:
## Reductions:
-- On COLON
--   reduce production list(ID) -> ID list(ID)

State 32:
## Known stack suffix:
## VAR boption(STATIC) list(ID)
## LR(1) items:
factoredAttributes -> VAR boption(STATIC) list(ID) . COLON returnedType [ VAR RBRACKET DEF ]
## Transitions:
-- On COLON shift to state 33
## Reductions:

State 33:
## Known stack suffix:
## VAR boption(STATIC) list(ID) COLON
## LR(1) items:
factoredAttributes -> VAR boption(STATIC) list(ID) COLON . returnedType [ VAR RBRACKET DEF ]
## Transitions:
-- On COLON shift to state 18
-- On returnedType shift to state 34
## Reductions:

State 34:
## Known stack suffix:
## VAR boption(STATIC) list(ID) COLON returnedType
## LR(1) items:
factoredAttributes -> VAR boption(STATIC) list(ID) COLON returnedType . [ VAR RBRACKET DEF ]
## Transitions:
## Reductions:
-- On VAR RBRACKET DEF
--   reduce production factoredAttributes -> VAR boption(STATIC) list(ID) COLON returnedType

State 35:
## Known stack suffix:
## DEF
## LR(1) items:
constructor -> DEF . CLASSNAME factoredVarParamList option(superclasseCall) IS block [ VAR RBRACKET DEF ]
methode -> DEF . boption(STATIC) boption(OVERRIDE) ID factoredVarParamList option(returnedType) IS block [ VAR DEF ]
methode -> DEF . boption(STATIC) boption(OVERRIDE) ID factoredVarParamList returnedType ASSIGN expression [ VAR DEF ]
## Transitions:
-- On STATIC shift to state 28
-- On CLASSNAME shift to state 36
-- On boption(STATIC) shift to state 132
## Reductions:
-- On OVERRIDE ID
--   reduce production boption(STATIC) ->

State 36:
## Known stack suffix:
## DEF CLASSNAME
## LR(1) items:
constructor -> DEF CLASSNAME . factoredVarParamList option(superclasseCall) IS block [ VAR RBRACKET DEF ]
## Transitions:
-- On LPAREN shift to state 3
-- On factoredVarParamList shift to state 37
## Reductions:

State 37:
## Known stack suffix:
## DEF CLASSNAME factoredVarParamList
## LR(1) items:
constructor -> DEF CLASSNAME factoredVarParamList . option(superclasseCall) IS block [ VAR RBRACKET DEF ]
## Transitions:
-- On COLON shift to state 38
-- On superclasseCall shift to state 108
-- On option(superclasseCall) shift to state 109
## Reductions:
-- On IS
--   reduce production option(superclasseCall) ->

State 38:
## Known stack suffix:
## COLON
## LR(1) items:
superclasseCall -> COLON . CLASSNAME argumentsList [ IS ]
## Transitions:
-- On CLASSNAME shift to state 39
## Reductions:

State 39:
## Known stack suffix:
## COLON CLASSNAME
## LR(1) items:
superclasseCall -> COLON CLASSNAME . argumentsList [ IS ]
## Transitions:
-- On LPAREN shift to state 40
-- On argumentsList shift to state 107
## Reductions:

State 40:
## Known stack suffix:
## LPAREN
## LR(1) items:
argumentsList -> LPAREN . loption(separated_nonempty_list(COMMA,expression)) RPAREN [ VAR TIMES THEN SEMICOLON SELECTION RPAREN RELOP RBRACKET PLUS MINUS IS DIV DEF COMMA ]
## Transitions:
-- On THIS shift to state 41
-- On SUPER shift to state 58
-- On PLUS shift to state 62
-- On NEW shift to state 63
-- On MINUS shift to state 66
-- On LPAREN shift to state 67
-- On ID shift to state 68
-- On CSTE shift to state 71
-- On CLASSNAME shift to state 76
-- On separated_nonempty_list(COMMA,expression) shift to state 101
-- On methodeCallA shift to state 45
-- On methodeCall shift to state 77
-- On loption(separated_nonempty_list(COMMA,expression)) shift to state 102
-- On instanciation shift to state 78
-- On expression shift to state 104
-- On expr3 shift to state 81
-- On expr2 shift to state 82
-- On expr1 shift to state 90
-- On containerA shift to state 85
-- On container shift to state 86
-- On castedExpr shift to state 87
## Reductions:
-- On RPAREN
--   reduce production loption(separated_nonempty_list(COMMA,expression)) ->

State 41:
## Known stack suffix:
## THIS
## LR(1) items:
container -> THIS . SELECTION containerA [ VAR TIMES THEN SEMICOLON RPAREN RELOP RBRACKET PLUS MINUS DIV DEF COMMA ASSIGN ]
methodeCall -> THIS . SELECTION methodeCallA [ VAR TIMES THEN SEMICOLON RPAREN RELOP RBRACKET PLUS MINUS DIV DEF COMMA ]
## Transitions:
-- On SELECTION shift to state 42
## Reductions:

State 42:
## Known stack suffix:
## THIS SELECTION
## LR(1) items:
container -> THIS SELECTION . containerA [ VAR TIMES THEN SEMICOLON RPAREN RELOP RBRACKET PLUS MINUS DIV DEF COMMA ASSIGN ]
methodeCall -> THIS SELECTION . methodeCallA [ VAR TIMES THEN SEMICOLON RPAREN RELOP RBRACKET PLUS MINUS DIV DEF COMMA ]
## Transitions:
-- On ID shift to state 43
-- On methodeCallA shift to state 56
-- On containerA shift to state 57
## Reductions:

State 43:
## Known stack suffix:
## ID
## LR(1) items:
containerA -> ID . [ VAR TIMES THEN SEMICOLON SELECTION RPAREN RELOP RBRACKET PLUS MINUS DIV DEF COMMA ASSIGN ]
containerA -> ID . SELECTION containerA [ VAR TIMES THEN SEMICOLON SELECTION RPAREN RELOP RBRACKET PLUS MINUS DIV DEF COMMA ASSIGN ]
methodeCallA -> ID . argumentsList [ VAR TIMES THEN SEMICOLON SELECTION RPAREN RELOP RBRACKET PLUS MINUS DIV DEF COMMA ]
methodeCallA -> ID . argumentsList SELECTION methodeCallA [ VAR TIMES THEN SEMICOLON SELECTION RPAREN RELOP RBRACKET PLUS MINUS DIV DEF COMMA ]
## Transitions:
-- On SELECTION shift to state 44
-- On LPAREN shift to state 40
-- On argumentsList shift to state 49
## Reductions:
-- On VAR TIMES THEN SEMICOLON SELECTION RPAREN RELOP RBRACKET PLUS MINUS DIV DEF COMMA ASSIGN
--   reduce production containerA -> ID
** Conflict on SELECTION

State 44:
## Known stack suffix:
## ID SELECTION
## LR(1) items:
containerA -> ID SELECTION . containerA [ VAR TIMES THEN SEMICOLON SELECTION RPAREN RELOP RBRACKET PLUS MINUS DIV DEF COMMA ASSIGN ]
## Transitions:
-- On ID shift to state 43
-- On methodeCallA shift to state 45
-- On containerA shift to state 48
## Reductions:

State 45:
## Known stack suffix:
## methodeCallA
## LR(1) items:
containerA -> methodeCallA . SELECTION ID [ VAR TIMES THEN SEMICOLON SELECTION RPAREN RELOP RBRACKET PLUS MINUS DIV DEF COMMA ASSIGN ]
## Transitions:
-- On SELECTION shift to state 46
## Reductions:

State 46:
## Known stack suffix:
## methodeCallA SELECTION
## LR(1) items:
containerA -> methodeCallA SELECTION . ID [ VAR TIMES THEN SEMICOLON SELECTION RPAREN RELOP RBRACKET PLUS MINUS DIV DEF COMMA ASSIGN ]
## Transitions:
-- On ID shift to state 47
## Reductions:

State 47:
## Known stack suffix:
## methodeCallA SELECTION ID
## LR(1) items:
containerA -> methodeCallA SELECTION ID . [ VAR TIMES THEN SEMICOLON SELECTION RPAREN RELOP RBRACKET PLUS MINUS DIV DEF COMMA ASSIGN ]
## Transitions:
## Reductions:
-- On VAR TIMES THEN SEMICOLON SELECTION RPAREN RELOP RBRACKET PLUS MINUS DIV DEF COMMA ASSIGN
--   reduce production containerA -> methodeCallA SELECTION ID

State 48:
## Known stack suffix:
## ID SELECTION containerA
## LR(1) items:
containerA -> ID SELECTION containerA . [ VAR TIMES THEN SEMICOLON SELECTION RPAREN RELOP RBRACKET PLUS MINUS DIV DEF COMMA ASSIGN ]
methodeCallA -> containerA . SELECTION ID argumentsList [ VAR TIMES THEN SEMICOLON SELECTION RPAREN RELOP RBRACKET PLUS MINUS DIV DEF COMMA ]
## Transitions:
## Reductions:
-- On VAR TIMES THEN SEMICOLON SELECTION RPAREN RELOP RBRACKET PLUS MINUS DIV DEF COMMA ASSIGN
--   reduce production containerA -> ID SELECTION containerA

State 49:
## Known stack suffix:
## ID argumentsList
## LR(1) items:
methodeCallA -> ID argumentsList . [ VAR TIMES THEN SEMICOLON SELECTION RPAREN RELOP RBRACKET PLUS MINUS DIV DEF COMMA ]
methodeCallA -> ID argumentsList . SELECTION methodeCallA [ VAR TIMES THEN SEMICOLON SELECTION RPAREN RELOP RBRACKET PLUS MINUS DIV DEF COMMA ]
## Transitions:
-- On SELECTION shift to state 50
## Reductions:
-- On VAR TIMES THEN SEMICOLON SELECTION RPAREN RELOP RBRACKET PLUS MINUS DIV DEF COMMA
--   reduce production methodeCallA -> ID argumentsList
** Conflict on SELECTION

State 50:
## Known stack suffix:
## ID argumentsList SELECTION
## LR(1) items:
methodeCallA -> ID argumentsList SELECTION . methodeCallA [ VAR TIMES THEN SEMICOLON SELECTION RPAREN RELOP RBRACKET PLUS MINUS DIV DEF COMMA ]
## Transitions:
-- On ID shift to state 43
-- On methodeCallA shift to state 51
-- On containerA shift to state 52
## Reductions:

State 51:
## Known stack suffix:
## ID argumentsList SELECTION methodeCallA
## LR(1) items:
containerA -> methodeCallA . SELECTION ID [ SELECTION ]
methodeCallA -> ID argumentsList SELECTION methodeCallA . [ VAR TIMES THEN SEMICOLON SELECTION RPAREN RELOP RBRACKET PLUS MINUS DIV DEF COMMA ]
## Transitions:
## Reductions:
-- On VAR TIMES THEN SEMICOLON SELECTION RPAREN RELOP RBRACKET PLUS MINUS DIV DEF COMMA
--   reduce production methodeCallA -> ID argumentsList SELECTION methodeCallA

State 52:
## Known stack suffix:
## containerA
## LR(1) items:
methodeCallA -> containerA . SELECTION ID argumentsList [ VAR TIMES THEN SEMICOLON SELECTION RPAREN RELOP RBRACKET PLUS MINUS DIV DEF COMMA ]
## Transitions:
-- On SELECTION shift to state 53
## Reductions:

State 53:
## Known stack suffix:
## containerA SELECTION
## LR(1) items:
methodeCallA -> containerA SELECTION . ID argumentsList [ VAR TIMES THEN SEMICOLON SELECTION RPAREN RELOP RBRACKET PLUS MINUS DIV DEF COMMA ]
## Transitions:
-- On ID shift to state 54
## Reductions:

State 54:
## Known stack suffix:
## containerA SELECTION ID
## LR(1) items:
methodeCallA -> containerA SELECTION ID . argumentsList [ VAR TIMES THEN SEMICOLON SELECTION RPAREN RELOP RBRACKET PLUS MINUS DIV DEF COMMA ]
## Transitions:
-- On LPAREN shift to state 40
-- On argumentsList shift to state 55
## Reductions:

State 55:
## Known stack suffix:
## containerA SELECTION ID argumentsList
## LR(1) items:
methodeCallA -> containerA SELECTION ID argumentsList . [ VAR TIMES THEN SEMICOLON SELECTION RPAREN RELOP RBRACKET PLUS MINUS DIV DEF COMMA ]
## Transitions:
## Reductions:
-- On VAR TIMES THEN SEMICOLON SELECTION RPAREN RELOP RBRACKET PLUS MINUS DIV DEF COMMA
--   reduce production methodeCallA -> containerA SELECTION ID argumentsList

State 56:
## Known stack suffix:
## THIS SELECTION methodeCallA
## LR(1) items:
containerA -> methodeCallA . SELECTION ID [ VAR TIMES THEN SEMICOLON SELECTION RPAREN RELOP RBRACKET PLUS MINUS DIV DEF COMMA ASSIGN ]
methodeCall -> THIS SELECTION methodeCallA . [ VAR TIMES THEN SEMICOLON RPAREN RELOP RBRACKET PLUS MINUS DIV DEF COMMA ]
## Transitions:
-- On SELECTION shift to state 46
## Reductions:
-- On VAR TIMES THEN SEMICOLON RPAREN RELOP RBRACKET PLUS MINUS DIV DEF COMMA
--   reduce production methodeCall -> THIS SELECTION methodeCallA

State 57:
## Known stack suffix:
## THIS SELECTION containerA
## LR(1) items:
container -> THIS SELECTION containerA . [ VAR TIMES THEN SEMICOLON RPAREN RELOP RBRACKET PLUS MINUS DIV DEF COMMA ASSIGN ]
methodeCallA -> containerA . SELECTION ID argumentsList [ VAR TIMES THEN SEMICOLON SELECTION RPAREN RELOP RBRACKET PLUS MINUS DIV DEF COMMA ]
## Transitions:
-- On SELECTION shift to state 53
## Reductions:
-- On VAR TIMES THEN SEMICOLON RPAREN RELOP RBRACKET PLUS MINUS DIV DEF COMMA ASSIGN
--   reduce production container -> THIS SELECTION containerA

State 58:
## Known stack suffix:
## SUPER
## LR(1) items:
container -> SUPER . SELECTION containerA [ VAR TIMES THEN SEMICOLON RPAREN RELOP RBRACKET PLUS MINUS DIV DEF COMMA ASSIGN ]
methodeCall -> SUPER . SELECTION methodeCallA [ VAR TIMES THEN SEMICOLON RPAREN RELOP RBRACKET PLUS MINUS DIV DEF COMMA ]
## Transitions:
-- On SELECTION shift to state 59
## Reductions:

State 59:
## Known stack suffix:
## SUPER SELECTION
## LR(1) items:
container -> SUPER SELECTION . containerA [ VAR TIMES THEN SEMICOLON RPAREN RELOP RBRACKET PLUS MINUS DIV DEF COMMA ASSIGN ]
methodeCall -> SUPER SELECTION . methodeCallA [ VAR TIMES THEN SEMICOLON RPAREN RELOP RBRACKET PLUS MINUS DIV DEF COMMA ]
## Transitions:
-- On ID shift to state 43
-- On methodeCallA shift to state 60
-- On containerA shift to state 61
## Reductions:

State 60:
## Known stack suffix:
## SUPER SELECTION methodeCallA
## LR(1) items:
containerA -> methodeCallA . SELECTION ID [ VAR TIMES THEN SEMICOLON SELECTION RPAREN RELOP RBRACKET PLUS MINUS DIV DEF COMMA ASSIGN ]
methodeCall -> SUPER SELECTION methodeCallA . [ VAR TIMES THEN SEMICOLON RPAREN RELOP RBRACKET PLUS MINUS DIV DEF COMMA ]
## Transitions:
-- On SELECTION shift to state 46
## Reductions:
-- On VAR TIMES THEN SEMICOLON RPAREN RELOP RBRACKET PLUS MINUS DIV DEF COMMA
--   reduce production methodeCall -> SUPER SELECTION methodeCallA

State 61:
## Known stack suffix:
## SUPER SELECTION containerA
## LR(1) items:
container -> SUPER SELECTION containerA . [ VAR TIMES THEN SEMICOLON RPAREN RELOP RBRACKET PLUS MINUS DIV DEF COMMA ASSIGN ]
methodeCallA -> containerA . SELECTION ID argumentsList [ VAR TIMES THEN SEMICOLON SELECTION RPAREN RELOP RBRACKET PLUS MINUS DIV DEF COMMA ]
## Transitions:
-- On SELECTION shift to state 53
## Reductions:
-- On VAR TIMES THEN SEMICOLON RPAREN RELOP RBRACKET PLUS MINUS DIV DEF COMMA ASSIGN
--   reduce production container -> SUPER SELECTION containerA

State 62:
## Known stack suffix:
## PLUS
## LR(1) items:
expr3 -> PLUS . expr3 [ VAR TIMES THEN SEMICOLON RPAREN RELOP RBRACKET PLUS MINUS DIV DEF COMMA ]
## Transitions:
-- On THIS shift to state 41
-- On SUPER shift to state 58
-- On PLUS shift to state 62
-- On NEW shift to state 63
-- On MINUS shift to state 66
-- On LPAREN shift to state 67
-- On ID shift to state 68
-- On CSTE shift to state 71
-- On CLASSNAME shift to state 76
-- On methodeCallA shift to state 45
-- On methodeCall shift to state 77
-- On instanciation shift to state 78
-- On expr3 shift to state 100
-- On containerA shift to state 85
-- On container shift to state 86
-- On castedExpr shift to state 87
## Reductions:

State 63:
## Known stack suffix:
## NEW
## LR(1) items:
instanciation -> NEW . CLASSNAME argumentsList [ VAR TIMES THEN SEMICOLON RPAREN RELOP RBRACKET PLUS MINUS DIV DEF COMMA ]
## Transitions:
-- On CLASSNAME shift to state 64
## Reductions:

State 64:
## Known stack suffix:
## NEW CLASSNAME
## LR(1) items:
instanciation -> NEW CLASSNAME . argumentsList [ VAR TIMES THEN SEMICOLON RPAREN RELOP RBRACKET PLUS MINUS DIV DEF COMMA ]
## Transitions:
-- On LPAREN shift to state 40
-- On argumentsList shift to state 65
## Reductions:

State 65:
## Known stack suffix:
## NEW CLASSNAME argumentsList
## LR(1) items:
instanciation -> NEW CLASSNAME argumentsList . [ VAR TIMES THEN SEMICOLON RPAREN RELOP RBRACKET PLUS MINUS DIV DEF COMMA ]
## Transitions:
## Reductions:
-- On VAR TIMES THEN SEMICOLON RPAREN RELOP RBRACKET PLUS MINUS DIV DEF COMMA
--   reduce production instanciation -> NEW CLASSNAME argumentsList

State 66:
## Known stack suffix:
## MINUS
## LR(1) items:
expr3 -> MINUS . expr3 [ VAR TIMES THEN SEMICOLON RPAREN RELOP RBRACKET PLUS MINUS DIV DEF COMMA ]
## Transitions:
-- On THIS shift to state 41
-- On SUPER shift to state 58
-- On PLUS shift to state 62
-- On NEW shift to state 63
-- On MINUS shift to state 66
-- On LPAREN shift to state 67
-- On ID shift to state 68
-- On CSTE shift to state 71
-- On CLASSNAME shift to state 76
-- On methodeCallA shift to state 45
-- On methodeCall shift to state 77
-- On instanciation shift to state 78
-- On expr3 shift to state 99
-- On containerA shift to state 85
-- On container shift to state 86
-- On castedExpr shift to state 87
## Reductions:

State 67:
## Known stack suffix:
## LPAREN
## LR(1) items:
castedExpr -> LPAREN . CLASSNAME expression RPAREN [ VAR TIMES THEN SEMICOLON RPAREN RELOP RBRACKET PLUS MINUS DIV DEF COMMA ]
expr3 -> LPAREN . expression RPAREN [ VAR TIMES THEN SEMICOLON RPAREN RELOP RBRACKET PLUS MINUS DIV DEF COMMA ]
## Transitions:
-- On THIS shift to state 41
-- On SUPER shift to state 58
-- On PLUS shift to state 62
-- On NEW shift to state 63
-- On MINUS shift to state 66
-- On LPAREN shift to state 67
-- On ID shift to state 68
-- On CSTE shift to state 71
-- On CLASSNAME shift to state 72
-- On methodeCallA shift to state 45
-- On methodeCall shift to state 77
-- On instanciation shift to state 78
-- On expression shift to state 97
-- On expr3 shift to state 81
-- On expr2 shift to state 82
-- On expr1 shift to state 90
-- On containerA shift to state 85
-- On container shift to state 86
-- On castedExpr shift to state 87
## Reductions:

State 68:
## Known stack suffix:
## ID
## LR(1) items:
containerA -> ID . [ VAR TIMES THEN SEMICOLON SELECTION RPAREN RELOP RBRACKET PLUS MINUS DIV DEF COMMA ASSIGN ]
containerA -> ID . SELECTION containerA [ VAR TIMES THEN SEMICOLON SELECTION RPAREN RELOP RBRACKET PLUS MINUS DIV DEF COMMA ASSIGN ]
methodeCall -> ID . SELECTION methodeCallA [ VAR TIMES THEN SEMICOLON RPAREN RELOP RBRACKET PLUS MINUS DIV DEF COMMA ]
methodeCallA -> ID . argumentsList [ SELECTION ]
methodeCallA -> ID . argumentsList SELECTION methodeCallA [ SELECTION ]
## Transitions:
-- On SELECTION shift to state 69
-- On LPAREN shift to state 40
-- On argumentsList shift to state 49
## Reductions:
-- On VAR TIMES THEN SEMICOLON SELECTION RPAREN RELOP RBRACKET PLUS MINUS DIV DEF COMMA ASSIGN
--   reduce production containerA -> ID
** Conflict on SELECTION

State 69:
## Known stack suffix:
## ID SELECTION
## LR(1) items:
containerA -> ID SELECTION . containerA [ VAR TIMES THEN SEMICOLON SELECTION RPAREN RELOP RBRACKET PLUS MINUS DIV DEF COMMA ASSIGN ]
methodeCall -> ID SELECTION . methodeCallA [ VAR TIMES THEN SEMICOLON RPAREN RELOP RBRACKET PLUS MINUS DIV DEF COMMA ]
## Transitions:
-- On ID shift to state 43
-- On methodeCallA shift to state 70
-- On containerA shift to state 48
## Reductions:

State 70:
## Known stack suffix:
## ID SELECTION methodeCallA
## LR(1) items:
containerA -> methodeCallA . SELECTION ID [ VAR TIMES THEN SEMICOLON SELECTION RPAREN RELOP RBRACKET PLUS MINUS DIV DEF COMMA ASSIGN ]
methodeCall -> ID SELECTION methodeCallA . [ VAR TIMES THEN SEMICOLON RPAREN RELOP RBRACKET PLUS MINUS DIV DEF COMMA ]
## Transitions:
-- On SELECTION shift to state 46
## Reductions:
-- On VAR TIMES THEN SEMICOLON RPAREN RELOP RBRACKET PLUS MINUS DIV DEF COMMA
--   reduce production methodeCall -> ID SELECTION methodeCallA

State 71:
## Known stack suffix:
## CSTE
## LR(1) items:
expr3 -> CSTE . [ VAR TIMES THEN SEMICOLON RPAREN RELOP RBRACKET PLUS MINUS DIV DEF COMMA ]
## Transitions:
## Reductions:
-- On VAR TIMES THEN SEMICOLON RPAREN RELOP RBRACKET PLUS MINUS DIV DEF COMMA
--   reduce production expr3 -> CSTE

State 72:
## Known stack suffix:
## LPAREN CLASSNAME
## LR(1) items:
castedExpr -> LPAREN CLASSNAME . expression RPAREN [ VAR TIMES THEN SEMICOLON RPAREN RELOP RBRACKET PLUS MINUS DIV DEF COMMA ]
container -> CLASSNAME . SELECTION containerA [ TIMES RPAREN RELOP PLUS MINUS DIV ]
methodeCall -> CLASSNAME . SELECTION methodeCallA [ TIMES RPAREN RELOP PLUS MINUS DIV ]
## Transitions:
-- On THIS shift to state 41
-- On SUPER shift to state 58
-- On SELECTION shift to state 73
-- On PLUS shift to state 62
-- On NEW shift to state 63
-- On MINUS shift to state 66
-- On LPAREN shift to state 67
-- On ID shift to state 68
-- On CSTE shift to state 71
-- On CLASSNAME shift to state 76
-- On methodeCallA shift to state 45
-- On methodeCall shift to state 77
-- On instanciation shift to state 78
-- On expression shift to state 79
-- On expr3 shift to state 81
-- On expr2 shift to state 82
-- On expr1 shift to state 90
-- On containerA shift to state 85
-- On container shift to state 86
-- On castedExpr shift to state 87
## Reductions:

State 73:
## Known stack suffix:
## CLASSNAME SELECTION
## LR(1) items:
container -> CLASSNAME SELECTION . containerA [ VAR TIMES THEN SEMICOLON RPAREN RELOP RBRACKET PLUS MINUS DIV DEF COMMA ASSIGN ]
methodeCall -> CLASSNAME SELECTION . methodeCallA [ VAR TIMES THEN SEMICOLON RPAREN RELOP RBRACKET PLUS MINUS DIV DEF COMMA ]
## Transitions:
-- On ID shift to state 43
-- On methodeCallA shift to state 74
-- On containerA shift to state 75
## Reductions:

State 74:
## Known stack suffix:
## CLASSNAME SELECTION methodeCallA
## LR(1) items:
containerA -> methodeCallA . SELECTION ID [ VAR TIMES THEN SEMICOLON SELECTION RPAREN RELOP RBRACKET PLUS MINUS DIV DEF COMMA ASSIGN ]
methodeCall -> CLASSNAME SELECTION methodeCallA . [ VAR TIMES THEN SEMICOLON RPAREN RELOP RBRACKET PLUS MINUS DIV DEF COMMA ]
## Transitions:
-- On SELECTION shift to state 46
## Reductions:
-- On VAR TIMES THEN SEMICOLON RPAREN RELOP RBRACKET PLUS MINUS DIV DEF COMMA
--   reduce production methodeCall -> CLASSNAME SELECTION methodeCallA

State 75:
## Known stack suffix:
## CLASSNAME SELECTION containerA
## LR(1) items:
container -> CLASSNAME SELECTION containerA . [ VAR TIMES THEN SEMICOLON RPAREN RELOP RBRACKET PLUS MINUS DIV DEF COMMA ASSIGN ]
methodeCallA -> containerA . SELECTION ID argumentsList [ VAR TIMES THEN SEMICOLON SELECTION RPAREN RELOP RBRACKET PLUS MINUS DIV DEF COMMA ]
## Transitions:
-- On SELECTION shift to state 53
## Reductions:
-- On VAR TIMES THEN SEMICOLON RPAREN RELOP RBRACKET PLUS MINUS DIV DEF COMMA ASSIGN
--   reduce production container -> CLASSNAME SELECTION containerA

State 76:
## Known stack suffix:
## CLASSNAME
## LR(1) items:
container -> CLASSNAME . SELECTION containerA [ VAR TIMES THEN SEMICOLON RPAREN RELOP RBRACKET PLUS MINUS DIV DEF COMMA ASSIGN ]
methodeCall -> CLASSNAME . SELECTION methodeCallA [ VAR TIMES THEN SEMICOLON RPAREN RELOP RBRACKET PLUS MINUS DIV DEF COMMA ]
## Transitions:
-- On SELECTION shift to state 73
## Reductions:

State 77:
## Known stack suffix:
## methodeCall
## LR(1) items:
expr3 -> methodeCall . [ VAR TIMES THEN SEMICOLON RPAREN RELOP RBRACKET PLUS MINUS DIV DEF COMMA ]
## Transitions:
## Reductions:
-- On VAR TIMES THEN SEMICOLON RPAREN RELOP RBRACKET PLUS MINUS DIV DEF COMMA
--   reduce production expr3 -> methodeCall

State 78:
## Known stack suffix:
## instanciation
## LR(1) items:
expr3 -> instanciation . [ VAR TIMES THEN SEMICOLON RPAREN RELOP RBRACKET PLUS MINUS DIV DEF COMMA ]
## Transitions:
## Reductions:
-- On VAR TIMES THEN SEMICOLON RPAREN RELOP RBRACKET PLUS MINUS DIV DEF COMMA
--   reduce production expr3 -> instanciation

State 79:
## Known stack suffix:
## LPAREN CLASSNAME expression
## LR(1) items:
castedExpr -> LPAREN CLASSNAME expression . RPAREN [ VAR TIMES THEN SEMICOLON RPAREN RELOP RBRACKET PLUS MINUS DIV DEF COMMA ]
## Transitions:
-- On RPAREN shift to state 80
## Reductions:

State 80:
## Known stack suffix:
## LPAREN CLASSNAME expression RPAREN
## LR(1) items:
castedExpr -> LPAREN CLASSNAME expression RPAREN . [ VAR TIMES THEN SEMICOLON RPAREN RELOP RBRACKET PLUS MINUS DIV DEF COMMA ]
## Transitions:
## Reductions:
-- On VAR TIMES THEN SEMICOLON RPAREN RELOP RBRACKET PLUS MINUS DIV DEF COMMA
--   reduce production castedExpr -> LPAREN CLASSNAME expression RPAREN

State 81:
## Known stack suffix:
## expr3
## LR(1) items:
expr2 -> expr3 . [ VAR TIMES THEN SEMICOLON RPAREN RELOP RBRACKET PLUS MINUS DIV DEF COMMA ]
## Transitions:
## Reductions:
-- On VAR TIMES THEN SEMICOLON RPAREN RELOP RBRACKET PLUS MINUS DIV DEF COMMA
--   reduce production expr2 -> expr3

State 82:
## Known stack suffix:
## expr2
## LR(1) items:
expr1 -> expr2 . [ VAR THEN SEMICOLON RPAREN RELOP RBRACKET PLUS MINUS DEF COMMA ]
expr2 -> expr2 . TIMES expr3 [ VAR TIMES THEN SEMICOLON RPAREN RELOP RBRACKET PLUS MINUS DIV DEF COMMA ]
expr2 -> expr2 . DIV expr3 [ VAR TIMES THEN SEMICOLON RPAREN RELOP RBRACKET PLUS MINUS DIV DEF COMMA ]
## Transitions:
-- On TIMES shift to state 83
-- On DIV shift to state 88
## Reductions:
-- On VAR THEN SEMICOLON RPAREN RELOP RBRACKET PLUS MINUS DEF COMMA
--   reduce production expr1 -> expr2

State 83:
## Known stack suffix:
## expr2 TIMES
## LR(1) items:
expr2 -> expr2 TIMES . expr3 [ VAR TIMES THEN SEMICOLON RPAREN RELOP RBRACKET PLUS MINUS DIV DEF COMMA ]
## Transitions:
-- On THIS shift to state 41
-- On SUPER shift to state 58
-- On PLUS shift to state 62
-- On NEW shift to state 63
-- On MINUS shift to state 66
-- On LPAREN shift to state 67
-- On ID shift to state 68
-- On CSTE shift to state 71
-- On CLASSNAME shift to state 76
-- On methodeCallA shift to state 45
-- On methodeCall shift to state 77
-- On instanciation shift to state 78
-- On expr3 shift to state 84
-- On containerA shift to state 85
-- On container shift to state 86
-- On castedExpr shift to state 87
## Reductions:

State 84:
## Known stack suffix:
## expr2 TIMES expr3
## LR(1) items:
expr2 -> expr2 TIMES expr3 . [ VAR TIMES THEN SEMICOLON RPAREN RELOP RBRACKET PLUS MINUS DIV DEF COMMA ]
## Transitions:
## Reductions:
-- On VAR TIMES THEN SEMICOLON RPAREN RELOP RBRACKET PLUS MINUS DIV DEF COMMA
--   reduce production expr2 -> expr2 TIMES expr3

State 85:
## Known stack suffix:
## containerA
## LR(1) items:
container -> containerA . [ VAR TIMES THEN SEMICOLON RPAREN RELOP RBRACKET PLUS MINUS DIV DEF COMMA ASSIGN ]
methodeCallA -> containerA . SELECTION ID argumentsList [ SELECTION ]
## Transitions:
-- On SELECTION shift to state 53
## Reductions:
-- On VAR TIMES THEN SEMICOLON RPAREN RELOP RBRACKET PLUS MINUS DIV DEF COMMA ASSIGN
--   reduce production container -> containerA

State 86:
## Known stack suffix:
## container
## LR(1) items:
expr3 -> container . [ VAR TIMES THEN SEMICOLON RPAREN RELOP RBRACKET PLUS MINUS DIV DEF COMMA ]
## Transitions:
## Reductions:
-- On VAR TIMES THEN SEMICOLON RPAREN RELOP RBRACKET PLUS MINUS DIV DEF COMMA
--   reduce production expr3 -> container

State 87:
## Known stack suffix:
## castedExpr
## LR(1) items:
expr3 -> castedExpr . [ VAR TIMES THEN SEMICOLON RPAREN RELOP RBRACKET PLUS MINUS DIV DEF COMMA ]
## Transitions:
## Reductions:
-- On VAR TIMES THEN SEMICOLON RPAREN RELOP RBRACKET PLUS MINUS DIV DEF COMMA
--   reduce production expr3 -> castedExpr

State 88:
## Known stack suffix:
## expr2 DIV
## LR(1) items:
expr2 -> expr2 DIV . expr3 [ VAR TIMES THEN SEMICOLON RPAREN RELOP RBRACKET PLUS MINUS DIV DEF COMMA ]
## Transitions:
-- On THIS shift to state 41
-- On SUPER shift to state 58
-- On PLUS shift to state 62
-- On NEW shift to state 63
-- On MINUS shift to state 66
-- On LPAREN shift to state 67
-- On ID shift to state 68
-- On CSTE shift to state 71
-- On CLASSNAME shift to state 76
-- On methodeCallA shift to state 45
-- On methodeCall shift to state 77
-- On instanciation shift to state 78
-- On expr3 shift to state 89
-- On containerA shift to state 85
-- On container shift to state 86
-- On castedExpr shift to state 87
## Reductions:

State 89:
## Known stack suffix:
## expr2 DIV expr3
## LR(1) items:
expr2 -> expr2 DIV expr3 . [ VAR TIMES THEN SEMICOLON RPAREN RELOP RBRACKET PLUS MINUS DIV DEF COMMA ]
## Transitions:
## Reductions:
-- On VAR TIMES THEN SEMICOLON RPAREN RELOP RBRACKET PLUS MINUS DIV DEF COMMA
--   reduce production expr2 -> expr2 DIV expr3

State 90:
## Known stack suffix:
## expr1
## LR(1) items:
expr1 -> expr1 . PLUS expr2 [ VAR THEN SEMICOLON RPAREN RELOP RBRACKET PLUS MINUS DEF COMMA ]
expr1 -> expr1 . MINUS expr2 [ VAR THEN SEMICOLON RPAREN RELOP RBRACKET PLUS MINUS DEF COMMA ]
expression -> expr1 . RELOP expr1 [ VAR THEN SEMICOLON RPAREN RBRACKET DEF COMMA ]
expression -> expr1 . [ VAR THEN SEMICOLON RPAREN RBRACKET DEF COMMA ]
## Transitions:
-- On RELOP shift to state 91
-- On PLUS shift to state 93
-- On MINUS shift to state 95
## Reductions:
-- On VAR THEN SEMICOLON RPAREN RBRACKET DEF COMMA
--   reduce production expression -> expr1

State 91:
## Known stack suffix:
## expr1 RELOP
## LR(1) items:
expression -> expr1 RELOP . expr1 [ VAR THEN SEMICOLON RPAREN RBRACKET DEF COMMA ]
## Transitions:
-- On THIS shift to state 41
-- On SUPER shift to state 58
-- On PLUS shift to state 62
-- On NEW shift to state 63
-- On MINUS shift to state 66
-- On LPAREN shift to state 67
-- On ID shift to state 68
-- On CSTE shift to state 71
-- On CLASSNAME shift to state 76
-- On methodeCallA shift to state 45
-- On methodeCall shift to state 77
-- On instanciation shift to state 78
-- On expr3 shift to state 81
-- On expr2 shift to state 82
-- On expr1 shift to state 92
-- On containerA shift to state 85
-- On container shift to state 86
-- On castedExpr shift to state 87
## Reductions:

State 92:
## Known stack suffix:
## expr1 RELOP expr1
## LR(1) items:
expr1 -> expr1 . PLUS expr2 [ VAR THEN SEMICOLON RPAREN RBRACKET PLUS MINUS DEF COMMA ]
expr1 -> expr1 . MINUS expr2 [ VAR THEN SEMICOLON RPAREN RBRACKET PLUS MINUS DEF COMMA ]
expression -> expr1 RELOP expr1 . [ VAR THEN SEMICOLON RPAREN RBRACKET DEF COMMA ]
## Transitions:
-- On PLUS shift to state 93
-- On MINUS shift to state 95
## Reductions:
-- On VAR THEN SEMICOLON RPAREN RBRACKET DEF COMMA
--   reduce production expression -> expr1 RELOP expr1

State 93:
## Known stack suffix:
## expr1 PLUS
## LR(1) items:
expr1 -> expr1 PLUS . expr2 [ VAR THEN SEMICOLON RPAREN RELOP RBRACKET PLUS MINUS DEF COMMA ]
## Transitions:
-- On THIS shift to state 41
-- On SUPER shift to state 58
-- On PLUS shift to state 62
-- On NEW shift to state 63
-- On MINUS shift to state 66
-- On LPAREN shift to state 67
-- On ID shift to state 68
-- On CSTE shift to state 71
-- On CLASSNAME shift to state 76
-- On methodeCallA shift to state 45
-- On methodeCall shift to state 77
-- On instanciation shift to state 78
-- On expr3 shift to state 81
-- On expr2 shift to state 94
-- On containerA shift to state 85
-- On container shift to state 86
-- On castedExpr shift to state 87
## Reductions:

State 94:
## Known stack suffix:
## expr1 PLUS expr2
## LR(1) items:
expr1 -> expr1 PLUS expr2 . [ VAR THEN SEMICOLON RPAREN RELOP RBRACKET PLUS MINUS DEF COMMA ]
expr2 -> expr2 . TIMES expr3 [ VAR TIMES THEN SEMICOLON RPAREN RELOP RBRACKET PLUS MINUS DIV DEF COMMA ]
expr2 -> expr2 . DIV expr3 [ VAR TIMES THEN SEMICOLON RPAREN RELOP RBRACKET PLUS MINUS DIV DEF COMMA ]
## Transitions:
-- On TIMES shift to state 83
-- On DIV shift to state 88
## Reductions:
-- On VAR THEN SEMICOLON RPAREN RELOP RBRACKET PLUS MINUS DEF COMMA
--   reduce production expr1 -> expr1 PLUS expr2

State 95:
## Known stack suffix:
## expr1 MINUS
## LR(1) items:
expr1 -> expr1 MINUS . expr2 [ VAR THEN SEMICOLON RPAREN RELOP RBRACKET PLUS MINUS DEF COMMA ]
## Transitions:
-- On THIS shift to state 41
-- On SUPER shift to state 58
-- On PLUS shift to state 62
-- On NEW shift to state 63
-- On MINUS shift to state 66
-- On LPAREN shift to state 67
-- On ID shift to state 68
-- On CSTE shift to state 71
-- On CLASSNAME shift to state 76
-- On methodeCallA shift to state 45
-- On methodeCall shift to state 77
-- On instanciation shift to state 78
-- On expr3 shift to state 81
-- On expr2 shift to state 96
-- On containerA shift to state 85
-- On container shift to state 86
-- On castedExpr shift to state 87
## Reductions:

State 96:
## Known stack suffix:
## expr1 MINUS expr2
## LR(1) items:
expr1 -> expr1 MINUS expr2 . [ VAR THEN SEMICOLON RPAREN RELOP RBRACKET PLUS MINUS DEF COMMA ]
expr2 -> expr2 . TIMES expr3 [ VAR TIMES THEN SEMICOLON RPAREN RELOP RBRACKET PLUS MINUS DIV DEF COMMA ]
expr2 -> expr2 . DIV expr3 [ VAR TIMES THEN SEMICOLON RPAREN RELOP RBRACKET PLUS MINUS DIV DEF COMMA ]
## Transitions:
-- On TIMES shift to state 83
-- On DIV shift to state 88
## Reductions:
-- On VAR THEN SEMICOLON RPAREN RELOP RBRACKET PLUS MINUS DEF COMMA
--   reduce production expr1 -> expr1 MINUS expr2

State 97:
## Known stack suffix:
## LPAREN expression
## LR(1) items:
expr3 -> LPAREN expression . RPAREN [ VAR TIMES THEN SEMICOLON RPAREN RELOP RBRACKET PLUS MINUS DIV DEF COMMA ]
## Transitions:
-- On RPAREN shift to state 98
## Reductions:

State 98:
## Known stack suffix:
## LPAREN expression RPAREN
## LR(1) items:
expr3 -> LPAREN expression RPAREN . [ VAR TIMES THEN SEMICOLON RPAREN RELOP RBRACKET PLUS MINUS DIV DEF COMMA ]
## Transitions:
## Reductions:
-- On VAR TIMES THEN SEMICOLON RPAREN RELOP RBRACKET PLUS MINUS DIV DEF COMMA
--   reduce production expr3 -> LPAREN expression RPAREN

State 99:
## Known stack suffix:
## MINUS expr3
## LR(1) items:
expr3 -> MINUS expr3 . [ VAR TIMES THEN SEMICOLON RPAREN RELOP RBRACKET PLUS MINUS DIV DEF COMMA ]
## Transitions:
## Reductions:
-- On VAR TIMES THEN SEMICOLON RPAREN RELOP RBRACKET PLUS MINUS DIV DEF COMMA
--   reduce production expr3 -> MINUS expr3

State 100:
## Known stack suffix:
## PLUS expr3
## LR(1) items:
expr3 -> PLUS expr3 . [ VAR TIMES THEN SEMICOLON RPAREN RELOP RBRACKET PLUS MINUS DIV DEF COMMA ]
## Transitions:
## Reductions:
-- On VAR TIMES THEN SEMICOLON RPAREN RELOP RBRACKET PLUS MINUS DIV DEF COMMA
--   reduce production expr3 -> PLUS expr3

State 101:
## Known stack suffix:
## separated_nonempty_list(COMMA,expression)
## LR(1) items:
loption(separated_nonempty_list(COMMA,expression)) -> separated_nonempty_list(COMMA,expression) . [ RPAREN ]
## Transitions:
## Reductions:
-- On RPAREN
--   reduce production loption(separated_nonempty_list(COMMA,expression)) -> separated_nonempty_list(COMMA,expression)

State 102:
## Known stack suffix:
## LPAREN loption(separated_nonempty_list(COMMA,expression))
## LR(1) items:
argumentsList -> LPAREN loption(separated_nonempty_list(COMMA,expression)) . RPAREN [ VAR TIMES THEN SEMICOLON SELECTION RPAREN RELOP RBRACKET PLUS MINUS IS DIV DEF COMMA ]
## Transitions:
-- On RPAREN shift to state 103
## Reductions:

State 103:
## Known stack suffix:
## LPAREN loption(separated_nonempty_list(COMMA,expression)) RPAREN
## LR(1) items:
argumentsList -> LPAREN loption(separated_nonempty_list(COMMA,expression)) RPAREN . [ VAR TIMES THEN SEMICOLON SELECTION RPAREN RELOP RBRACKET PLUS MINUS IS DIV DEF COMMA ]
## Transitions:
## Reductions:
-- On VAR TIMES THEN SEMICOLON SELECTION RPAREN RELOP RBRACKET PLUS MINUS IS DIV DEF COMMA
--   reduce production argumentsList -> LPAREN loption(separated_nonempty_list(COMMA,expression)) RPAREN

State 104:
## Known stack suffix:
## expression
## LR(1) items:
separated_nonempty_list(COMMA,expression) -> expression . [ RPAREN ]
separated_nonempty_list(COMMA,expression) -> expression . COMMA separated_nonempty_list(COMMA,expression) [ RPAREN ]
## Transitions:
-- On COMMA shift to state 105
## Reductions:
-- On RPAREN
--   reduce production separated_nonempty_list(COMMA,expression) -> expression

State 105:
## Known stack suffix:
## expression COMMA
## LR(1) items:
separated_nonempty_list(COMMA,expression) -> expression COMMA . separated_nonempty_list(COMMA,expression) [ RPAREN ]
## Transitions:
-- On THIS shift to state 41
-- On SUPER shift to state 58
-- On PLUS shift to state 62
-- On NEW shift to state 63
-- On MINUS shift to state 66
-- On LPAREN shift to state 67
-- On ID shift to state 68
-- On CSTE shift to state 71
-- On CLASSNAME shift to state 76
-- On separated_nonempty_list(COMMA,expression) shift to state 106
-- On methodeCallA shift to state 45
-- On methodeCall shift to state 77
-- On instanciation shift to state 78
-- On expression shift to state 104
-- On expr3 shift to state 81
-- On expr2 shift to state 82
-- On expr1 shift to state 90
-- On containerA shift to state 85
-- On container shift to state 86
-- On castedExpr shift to state 87
## Reductions:

State 106:
## Known stack suffix:
## expression COMMA separated_nonempty_list(COMMA,expression)
## LR(1) items:
separated_nonempty_list(COMMA,expression) -> expression COMMA separated_nonempty_list(COMMA,expression) . [ RPAREN ]
## Transitions:
## Reductions:
-- On RPAREN
--   reduce production separated_nonempty_list(COMMA,expression) -> expression COMMA separated_nonempty_list(COMMA,expression)

State 107:
## Known stack suffix:
## COLON CLASSNAME argumentsList
## LR(1) items:
superclasseCall -> COLON CLASSNAME argumentsList . [ IS ]
## Transitions:
## Reductions:
-- On IS
--   reduce production superclasseCall -> COLON CLASSNAME argumentsList

State 108:
## Known stack suffix:
## superclasseCall
## LR(1) items:
option(superclasseCall) -> superclasseCall . [ IS ]
## Transitions:
## Reductions:
-- On IS
--   reduce production option(superclasseCall) -> superclasseCall

State 109:
## Known stack suffix:
## DEF CLASSNAME factoredVarParamList option(superclasseCall)
## LR(1) items:
constructor -> DEF CLASSNAME factoredVarParamList option(superclasseCall) . IS block [ VAR RBRACKET DEF ]
## Transitions:
-- On IS shift to state 110
## Reductions:

State 110:
## Known stack suffix:
## DEF CLASSNAME factoredVarParamList option(superclasseCall) IS
## LR(1) items:
constructor -> DEF CLASSNAME factoredVarParamList option(superclasseCall) IS . block [ VAR RBRACKET DEF ]
## Transitions:
-- On LBRACKET shift to state 111
-- On block shift to state 131
## Reductions:

State 111:
## Known stack suffix:
## LBRACKET
## LR(1) items:
block -> LBRACKET . list(instruction) RBRACKET [ VAR THIS SUPER RETURN RBRACKET PLUS NEW MINUS LPAREN LBRACKET IF ID EOF ELSE DEF CSTE CLASSNAME ]
## Transitions:
-- On THIS shift to state 41
-- On SUPER shift to state 58
-- On RETURN shift to state 112
-- On PLUS shift to state 62
-- On NEW shift to state 63
-- On MINUS shift to state 66
-- On LPAREN shift to state 67
-- On LBRACKET shift to state 111
-- On IF shift to state 114
-- On ID shift to state 68
-- On CSTE shift to state 71
-- On CLASSNAME shift to state 76
-- On methodeCallA shift to state 45
-- On methodeCall shift to state 77
-- On list(instruction) shift to state 127
-- On instruction shift to state 129
-- On instanciation shift to state 78
-- On expression shift to state 120
-- On expr3 shift to state 81
-- On expr2 shift to state 82
-- On expr1 shift to state 90
-- On containerA shift to state 85
-- On container shift to state 122
-- On castedExpr shift to state 87
-- On block shift to state 126
## Reductions:
-- On RBRACKET
--   reduce production list(instruction) ->

State 112:
## Known stack suffix:
## RETURN
## LR(1) items:
instruction -> RETURN . SEMICOLON [ THIS SUPER RETURN RBRACKET PLUS NEW MINUS LPAREN LBRACKET IF ID ELSE CSTE CLASSNAME ]
## Transitions:
-- On SEMICOLON shift to state 113
## Reductions:

State 113:
## Known stack suffix:
## RETURN SEMICOLON
## LR(1) items:
instruction -> RETURN SEMICOLON . [ THIS SUPER RETURN RBRACKET PLUS NEW MINUS LPAREN LBRACKET IF ID ELSE CSTE CLASSNAME ]
## Transitions:
## Reductions:
-- On THIS SUPER RETURN RBRACKET PLUS NEW MINUS LPAREN LBRACKET IF ID ELSE CSTE CLASSNAME
--   reduce production instruction -> RETURN SEMICOLON

State 114:
## Known stack suffix:
## IF
## LR(1) items:
instruction -> IF . expression THEN instruction ELSE instruction [ THIS SUPER RETURN RBRACKET PLUS NEW MINUS LPAREN LBRACKET IF ID ELSE CSTE CLASSNAME ]
## Transitions:
-- On THIS shift to state 41
-- On SUPER shift to state 58
-- On PLUS shift to state 62
-- On NEW shift to state 63
-- On MINUS shift to state 66
-- On LPAREN shift to state 67
-- On ID shift to state 68
-- On CSTE shift to state 71
-- On CLASSNAME shift to state 76
-- On methodeCallA shift to state 45
-- On methodeCall shift to state 77
-- On instanciation shift to state 78
-- On expression shift to state 115
-- On expr3 shift to state 81
-- On expr2 shift to state 82
-- On expr1 shift to state 90
-- On containerA shift to state 85
-- On container shift to state 86
-- On castedExpr shift to state 87
## Reductions:

State 115:
## Known stack suffix:
## IF expression
## LR(1) items:
instruction -> IF expression . THEN instruction ELSE instruction [ THIS SUPER RETURN RBRACKET PLUS NEW MINUS LPAREN LBRACKET IF ID ELSE CSTE CLASSNAME ]
## Transitions:
-- On THEN shift to state 116
## Reductions:

State 116:
## Known stack suffix:
## IF expression THEN
## LR(1) items:
instruction -> IF expression THEN . instruction ELSE instruction [ THIS SUPER RETURN RBRACKET PLUS NEW MINUS LPAREN LBRACKET IF ID ELSE CSTE CLASSNAME ]
## Transitions:
-- On THIS shift to state 41
-- On SUPER shift to state 58
-- On RETURN shift to state 112
-- On PLUS shift to state 62
-- On NEW shift to state 63
-- On MINUS shift to state 66
-- On LPAREN shift to state 67
-- On LBRACKET shift to state 111
-- On IF shift to state 114
-- On ID shift to state 68
-- On CSTE shift to state 71
-- On CLASSNAME shift to state 76
-- On methodeCallA shift to state 45
-- On methodeCall shift to state 77
-- On instruction shift to state 117
-- On instanciation shift to state 78
-- On expression shift to state 120
-- On expr3 shift to state 81
-- On expr2 shift to state 82
-- On expr1 shift to state 90
-- On containerA shift to state 85
-- On container shift to state 122
-- On castedExpr shift to state 87
-- On block shift to state 126
## Reductions:

State 117:
## Known stack suffix:
## IF expression THEN instruction
## LR(1) items:
instruction -> IF expression THEN instruction . ELSE instruction [ THIS SUPER RETURN RBRACKET PLUS NEW MINUS LPAREN LBRACKET IF ID ELSE CSTE CLASSNAME ]
## Transitions:
-- On ELSE shift to state 118
## Reductions:

State 118:
## Known stack suffix:
## IF expression THEN instruction ELSE
## LR(1) items:
instruction -> IF expression THEN instruction ELSE . instruction [ THIS SUPER RETURN RBRACKET PLUS NEW MINUS LPAREN LBRACKET IF ID ELSE CSTE CLASSNAME ]
## Transitions:
-- On THIS shift to state 41
-- On SUPER shift to state 58
-- On RETURN shift to state 112
-- On PLUS shift to state 62
-- On NEW shift to state 63
-- On MINUS shift to state 66
-- On LPAREN shift to state 67
-- On LBRACKET shift to state 111
-- On IF shift to state 114
-- On ID shift to state 68
-- On CSTE shift to state 71
-- On CLASSNAME shift to state 76
-- On methodeCallA shift to state 45
-- On methodeCall shift to state 77
-- On instruction shift to state 119
-- On instanciation shift to state 78
-- On expression shift to state 120
-- On expr3 shift to state 81
-- On expr2 shift to state 82
-- On expr1 shift to state 90
-- On containerA shift to state 85
-- On container shift to state 122
-- On castedExpr shift to state 87
-- On block shift to state 126
## Reductions:

State 119:
## Known stack suffix:
## IF expression THEN instruction ELSE instruction
## LR(1) items:
instruction -> IF expression THEN instruction ELSE instruction . [ THIS SUPER RETURN RBRACKET PLUS NEW MINUS LPAREN LBRACKET IF ID ELSE CSTE CLASSNAME ]
## Transitions:
## Reductions:
-- On THIS SUPER RETURN RBRACKET PLUS NEW MINUS LPAREN LBRACKET IF ID ELSE CSTE CLASSNAME
--   reduce production instruction -> IF expression THEN instruction ELSE instruction

State 120:
## Known stack suffix:
## expression
## LR(1) items:
instruction -> expression . SEMICOLON [ THIS SUPER RETURN RBRACKET PLUS NEW MINUS LPAREN LBRACKET IF ID ELSE CSTE CLASSNAME ]
## Transitions:
-- On SEMICOLON shift to state 121
## Reductions:

State 121:
## Known stack suffix:
## expression SEMICOLON
## LR(1) items:
instruction -> expression SEMICOLON . [ THIS SUPER RETURN RBRACKET PLUS NEW MINUS LPAREN LBRACKET IF ID ELSE CSTE CLASSNAME ]
## Transitions:
## Reductions:
-- On THIS SUPER RETURN RBRACKET PLUS NEW MINUS LPAREN LBRACKET IF ID ELSE CSTE CLASSNAME
--   reduce production instruction -> expression SEMICOLON

State 122:
## Known stack suffix:
## container
## LR(1) items:
expr3 -> container . [ TIMES SEMICOLON RELOP PLUS MINUS DIV ]
instruction -> container . ASSIGN expression SEMICOLON [ THIS SUPER RETURN RBRACKET PLUS NEW MINUS LPAREN LBRACKET IF ID ELSE CSTE CLASSNAME ]
## Transitions:
-- On ASSIGN shift to state 123
## Reductions:
-- On TIMES SEMICOLON RELOP PLUS MINUS DIV
--   reduce production expr3 -> container

State 123:
## Known stack suffix:
## container ASSIGN
## LR(1) items:
instruction -> container ASSIGN . expression SEMICOLON [ THIS SUPER RETURN RBRACKET PLUS NEW MINUS LPAREN LBRACKET IF ID ELSE CSTE CLASSNAME ]
## Transitions:
-- On THIS shift to state 41
-- On SUPER shift to state 58
-- On PLUS shift to state 62
-- On NEW shift to state 63
-- On MINUS shift to state 66
-- On LPAREN shift to state 67
-- On ID shift to state 68
-- On CSTE shift to state 71
-- On CLASSNAME shift to state 76
-- On methodeCallA shift to state 45
-- On methodeCall shift to state 77
-- On instanciation shift to state 78
-- On expression shift to state 124
-- On expr3 shift to state 81
-- On expr2 shift to state 82
-- On expr1 shift to state 90
-- On containerA shift to state 85
-- On container shift to state 86
-- On castedExpr shift to state 87
## Reductions:

State 124:
## Known stack suffix:
## container ASSIGN expression
## LR(1) items:
instruction -> container ASSIGN expression . SEMICOLON [ THIS SUPER RETURN RBRACKET PLUS NEW MINUS LPAREN LBRACKET IF ID ELSE CSTE CLASSNAME ]
## Transitions:
-- On SEMICOLON shift to state 125
## Reductions:

State 125:
## Known stack suffix:
## container ASSIGN expression SEMICOLON
## LR(1) items:
instruction -> container ASSIGN expression SEMICOLON . [ THIS SUPER RETURN RBRACKET PLUS NEW MINUS LPAREN LBRACKET IF ID ELSE CSTE CLASSNAME ]
## Transitions:
## Reductions:
-- On THIS SUPER RETURN RBRACKET PLUS NEW MINUS LPAREN LBRACKET IF ID ELSE CSTE CLASSNAME
--   reduce production instruction -> container ASSIGN expression SEMICOLON

State 126:
## Known stack suffix:
## block
## LR(1) items:
instruction -> block . [ THIS SUPER RETURN RBRACKET PLUS NEW MINUS LPAREN LBRACKET IF ID ELSE CSTE CLASSNAME ]
## Transitions:
## Reductions:
-- On THIS SUPER RETURN RBRACKET PLUS NEW MINUS LPAREN LBRACKET IF ID ELSE CSTE CLASSNAME
--   reduce production instruction -> block

State 127:
## Known stack suffix:
## LBRACKET list(instruction)
## LR(1) items:
block -> LBRACKET list(instruction) . RBRACKET [ VAR THIS SUPER RETURN RBRACKET PLUS NEW MINUS LPAREN LBRACKET IF ID EOF ELSE DEF CSTE CLASSNAME ]
## Transitions:
-- On RBRACKET shift to state 128
## Reductions:

State 128:
## Known stack suffix:
## LBRACKET list(instruction) RBRACKET
## LR(1) items:
block -> LBRACKET list(instruction) RBRACKET . [ VAR THIS SUPER RETURN RBRACKET PLUS NEW MINUS LPAREN LBRACKET IF ID EOF ELSE DEF CSTE CLASSNAME ]
## Transitions:
## Reductions:
-- On VAR THIS SUPER RETURN RBRACKET PLUS NEW MINUS LPAREN LBRACKET IF ID EOF ELSE DEF CSTE CLASSNAME
--   reduce production block -> LBRACKET list(instruction) RBRACKET

State 129:
## Known stack suffix:
## instruction
## LR(1) items:
list(instruction) -> instruction . list(instruction) [ RBRACKET ]
## Transitions:
-- On THIS shift to state 41
-- On SUPER shift to state 58
-- On RETURN shift to state 112
-- On PLUS shift to state 62
-- On NEW shift to state 63
-- On MINUS shift to state 66
-- On LPAREN shift to state 67
-- On LBRACKET shift to state 111
-- On IF shift to state 114
-- On ID shift to state 68
-- On CSTE shift to state 71
-- On CLASSNAME shift to state 76
-- On methodeCallA shift to state 45
-- On methodeCall shift to state 77
-- On list(instruction) shift to state 130
-- On instruction shift to state 129
-- On instanciation shift to state 78
-- On expression shift to state 120
-- On expr3 shift to state 81
-- On expr2 shift to state 82
-- On expr1 shift to state 90
-- On containerA shift to state 85
-- On container shift to state 122
-- On castedExpr shift to state 87
-- On block shift to state 126
## Reductions:
-- On RBRACKET
--   reduce production list(instruction) ->

State 130:
## Known stack suffix:
## instruction list(instruction)
## LR(1) items:
list(instruction) -> instruction list(instruction) . [ RBRACKET ]
## Transitions:
## Reductions:
-- On RBRACKET
--   reduce production list(instruction) -> instruction list(instruction)

State 131:
## Known stack suffix:
## DEF CLASSNAME factoredVarParamList option(superclasseCall) IS block
## LR(1) items:
constructor -> DEF CLASSNAME factoredVarParamList option(superclasseCall) IS block . [ VAR RBRACKET DEF ]
## Transitions:
## Reductions:
-- On VAR RBRACKET DEF
--   reduce production constructor -> DEF CLASSNAME factoredVarParamList option(superclasseCall) IS block

State 132:
## Known stack suffix:
## DEF boption(STATIC)
## LR(1) items:
methode -> DEF boption(STATIC) . boption(OVERRIDE) ID factoredVarParamList option(returnedType) IS block [ VAR RBRACKET DEF ]
methode -> DEF boption(STATIC) . boption(OVERRIDE) ID factoredVarParamList returnedType ASSIGN expression [ VAR RBRACKET DEF ]
## Transitions:
-- On OVERRIDE shift to state 133
-- On boption(OVERRIDE) shift to state 134
## Reductions:
-- On ID
--   reduce production boption(OVERRIDE) ->

State 133:
## Known stack suffix:
## OVERRIDE
## LR(1) items:
boption(OVERRIDE) -> OVERRIDE . [ ID ]
## Transitions:
## Reductions:
-- On ID
--   reduce production boption(OVERRIDE) -> OVERRIDE

State 134:
## Known stack suffix:
## DEF boption(STATIC) boption(OVERRIDE)
## LR(1) items:
methode -> DEF boption(STATIC) boption(OVERRIDE) . ID factoredVarParamList option(returnedType) IS block [ VAR RBRACKET DEF ]
methode -> DEF boption(STATIC) boption(OVERRIDE) . ID factoredVarParamList returnedType ASSIGN expression [ VAR RBRACKET DEF ]
## Transitions:
-- On ID shift to state 135
## Reductions:

State 135:
## Known stack suffix:
## DEF boption(STATIC) boption(OVERRIDE) ID
## LR(1) items:
methode -> DEF boption(STATIC) boption(OVERRIDE) ID . factoredVarParamList option(returnedType) IS block [ VAR RBRACKET DEF ]
methode -> DEF boption(STATIC) boption(OVERRIDE) ID . factoredVarParamList returnedType ASSIGN expression [ VAR RBRACKET DEF ]
## Transitions:
-- On LPAREN shift to state 3
-- On factoredVarParamList shift to state 136
## Reductions:

State 136:
## Known stack suffix:
## DEF boption(STATIC) boption(OVERRIDE) ID factoredVarParamList
## LR(1) items:
methode -> DEF boption(STATIC) boption(OVERRIDE) ID factoredVarParamList . option(returnedType) IS block [ VAR RBRACKET DEF ]
methode -> DEF boption(STATIC) boption(OVERRIDE) ID factoredVarParamList . returnedType ASSIGN expression [ VAR RBRACKET DEF ]
## Transitions:
-- On COLON shift to state 18
-- On returnedType shift to state 137
-- On option(returnedType) shift to state 140
## Reductions:
-- On IS
--   reduce production option(returnedType) ->

State 137:
## Known stack suffix:
## DEF boption(STATIC) boption(OVERRIDE) ID factoredVarParamList returnedType
## LR(1) items:
methode -> DEF boption(STATIC) boption(OVERRIDE) ID factoredVarParamList returnedType . ASSIGN expression [ VAR RBRACKET DEF ]
option(returnedType) -> returnedType . [ IS ]
## Transitions:
-- On ASSIGN shift to state 138
## Reductions:
-- On IS
--   reduce production option(returnedType) -> returnedType

State 138:
## Known stack suffix:
## DEF boption(STATIC) boption(OVERRIDE) ID factoredVarParamList returnedType ASSIGN
## LR(1) items:
methode -> DEF boption(STATIC) boption(OVERRIDE) ID factoredVarParamList returnedType ASSIGN . expression [ VAR RBRACKET DEF ]
## Transitions:
-- On THIS shift to state 41
-- On SUPER shift to state 58
-- On PLUS shift to state 62
-- On NEW shift to state 63
-- On MINUS shift to state 66
-- On LPAREN shift to state 67
-- On ID shift to state 68
-- On CSTE shift to state 71
-- On CLASSNAME shift to state 76
-- On methodeCallA shift to state 45
-- On methodeCall shift to state 77
-- On instanciation shift to state 78
-- On expression shift to state 139
-- On expr3 shift to state 81
-- On expr2 shift to state 82
-- On expr1 shift to state 90
-- On containerA shift to state 85
-- On container shift to state 86
-- On castedExpr shift to state 87
## Reductions:

State 139:
## Known stack suffix:
## DEF boption(STATIC) boption(OVERRIDE) ID factoredVarParamList returnedType ASSIGN expression
## LR(1) items:
methode -> DEF boption(STATIC) boption(OVERRIDE) ID factoredVarParamList returnedType ASSIGN expression . [ VAR RBRACKET DEF ]
## Transitions:
## Reductions:
-- On VAR RBRACKET DEF
--   reduce production methode -> DEF boption(STATIC) boption(OVERRIDE) ID factoredVarParamList returnedType ASSIGN expression

State 140:
## Known stack suffix:
## DEF boption(STATIC) boption(OVERRIDE) ID factoredVarParamList option(returnedType)
## LR(1) items:
methode -> DEF boption(STATIC) boption(OVERRIDE) ID factoredVarParamList option(returnedType) . IS block [ VAR RBRACKET DEF ]
## Transitions:
-- On IS shift to state 141
## Reductions:

State 141:
## Known stack suffix:
## DEF boption(STATIC) boption(OVERRIDE) ID factoredVarParamList option(returnedType) IS
## LR(1) items:
methode -> DEF boption(STATIC) boption(OVERRIDE) ID factoredVarParamList option(returnedType) IS . block [ VAR RBRACKET DEF ]
## Transitions:
-- On LBRACKET shift to state 111
-- On block shift to state 142
## Reductions:

State 142:
## Known stack suffix:
## DEF boption(STATIC) boption(OVERRIDE) ID factoredVarParamList option(returnedType) IS block
## LR(1) items:
methode -> DEF boption(STATIC) boption(OVERRIDE) ID factoredVarParamList option(returnedType) IS block . [ VAR RBRACKET DEF ]
## Transitions:
## Reductions:
-- On VAR RBRACKET DEF
--   reduce production methode -> DEF boption(STATIC) boption(OVERRIDE) ID factoredVarParamList option(returnedType) IS block

State 143:
## Known stack suffix:
## methode
## LR(1) items:
anyClassDecl -> methode . [ VAR RBRACKET DEF ]
## Transitions:
## Reductions:
-- On VAR RBRACKET DEF
--   reduce production anyClassDecl -> methode

State 144:
## Known stack suffix:
## factoredAttributes
## LR(1) items:
anyClassDecl -> factoredAttributes . [ VAR RBRACKET DEF ]
## Transitions:
## Reductions:
-- On VAR RBRACKET DEF
--   reduce production anyClassDecl -> factoredAttributes

State 145:
## Known stack suffix:
## constructor
## LR(1) items:
anyClDeclAndConstructor -> constructor . [ VAR RBRACKET DEF ]
## Transitions:
## Reductions:
-- On VAR RBRACKET DEF
--   reduce production anyClDeclAndConstructor -> constructor

State 146:
## Known stack suffix:
## CLASSE CLASSNAME factoredVarParamList option(extends) IS LBRACKET classBody
## LR(1) items:
classe -> CLASSE CLASSNAME factoredVarParamList option(extends) IS LBRACKET classBody . RBRACKET [ LBRACKET CLASSE ]
## Transitions:
-- On RBRACKET shift to state 147
## Reductions:

State 147:
## Known stack suffix:
## CLASSE CLASSNAME factoredVarParamList option(extends) IS LBRACKET classBody RBRACKET
## LR(1) items:
classe -> CLASSE CLASSNAME factoredVarParamList option(extends) IS LBRACKET classBody RBRACKET . [ LBRACKET CLASSE ]
## Transitions:
## Reductions:
-- On LBRACKET CLASSE
--   reduce production classe -> CLASSE CLASSNAME factoredVarParamList option(extends) IS LBRACKET classBody RBRACKET

State 148:
## Known stack suffix:
## anyClassDecl
## LR(1) items:
anyClDeclAndConstructor -> anyClassDecl . anyClDeclAndConstructor [ VAR RBRACKET DEF ]
## Transitions:
-- On VAR shift to state 27
-- On DEF shift to state 35
-- On methode shift to state 143
-- On factoredAttributes shift to state 144
-- On constructor shift to state 145
-- On anyClassDecl shift to state 148
-- On anyClDeclAndConstructor shift to state 149
## Reductions:

State 149:
## Known stack suffix:
## anyClassDecl anyClDeclAndConstructor
## LR(1) items:
anyClDeclAndConstructor -> anyClassDecl anyClDeclAndConstructor . [ VAR RBRACKET DEF ]
## Transitions:
## Reductions:
-- On VAR RBRACKET DEF
--   reduce production anyClDeclAndConstructor -> anyClassDecl anyClDeclAndConstructor

State 150:
## Known stack suffix:
## anyClDeclAndConstructor
## LR(1) items:
classBody -> anyClDeclAndConstructor . list(anyClassDecl) [ RBRACKET ]
## Transitions:
-- On VAR shift to state 27
-- On DEF shift to state 151
-- On methode shift to state 143
-- On list(anyClassDecl) shift to state 152
-- On factoredAttributes shift to state 144
-- On anyClassDecl shift to state 153
## Reductions:
-- On RBRACKET
--   reduce production list(anyClassDecl) ->

State 151:
## Known stack suffix:
## DEF
## LR(1) items:
methode -> DEF . boption(STATIC) boption(OVERRIDE) ID factoredVarParamList option(returnedType) IS block [ VAR RBRACKET DEF ]
methode -> DEF . boption(STATIC) boption(OVERRIDE) ID factoredVarParamList returnedType ASSIGN expression [ VAR RBRACKET DEF ]
## Transitions:
-- On STATIC shift to state 28
-- On boption(STATIC) shift to state 132
## Reductions:
-- On OVERRIDE ID
--   reduce production boption(STATIC) ->

State 152:
## Known stack suffix:
## anyClDeclAndConstructor list(anyClassDecl)
## LR(1) items:
classBody -> anyClDeclAndConstructor list(anyClassDecl) . [ RBRACKET ]
## Transitions:
## Reductions:
-- On RBRACKET
--   reduce production classBody -> anyClDeclAndConstructor list(anyClassDecl)

State 153:
## Known stack suffix:
## anyClassDecl
## LR(1) items:
list(anyClassDecl) -> anyClassDecl . list(anyClassDecl) [ RBRACKET ]
## Transitions:
-- On VAR shift to state 27
-- On DEF shift to state 151
-- On methode shift to state 143
-- On list(anyClassDecl) shift to state 154
-- On factoredAttributes shift to state 144
-- On anyClassDecl shift to state 153
## Reductions:
-- On RBRACKET
--   reduce production list(anyClassDecl) ->

State 154:
## Known stack suffix:
## anyClassDecl list(anyClassDecl)
## LR(1) items:
list(anyClassDecl) -> anyClassDecl list(anyClassDecl) . [ RBRACKET ]
## Transitions:
## Reductions:
-- On RBRACKET
--   reduce production list(anyClassDecl) -> anyClassDecl list(anyClassDecl)

State 155:
## Known stack suffix:
## extends
## LR(1) items:
option(extends) -> extends . [ IS ]
## Transitions:
## Reductions:
-- On IS
--   reduce production option(extends) -> extends

State 156:
## Known stack suffix:
## prog
## LR(1) items:
prog' -> prog . [ # ]
## Transitions:
## Reductions:
-- On #
--   accept prog

State 157:
## Known stack suffix:
## list(classe)
## LR(1) items:
prog -> list(classe) . block EOF [ # ]
## Transitions:
-- On LBRACKET shift to state 111
-- On block shift to state 158
## Reductions:

State 158:
## Known stack suffix:
## list(classe) block
## LR(1) items:
prog -> list(classe) block . EOF [ # ]
## Transitions:
-- On EOF shift to state 159
## Reductions:

State 159:
## Known stack suffix:
## list(classe) block EOF
## LR(1) items:
prog -> list(classe) block EOF . [ # ]
## Transitions:
## Reductions:
-- On #
--   reduce production prog -> list(classe) block EOF

State 160:
## Known stack suffix:
## classe
## LR(1) items:
list(classe) -> classe . list(classe) [ LBRACKET ]
## Transitions:
-- On CLASSE shift to state 1
-- On list(classe) shift to state 161
-- On classe shift to state 160
## Reductions:
-- On LBRACKET
--   reduce production list(classe) ->

State 161:
## Known stack suffix:
## classe list(classe)
## LR(1) items:
list(classe) -> classe list(classe) . [ LBRACKET ]
## Transitions:
## Reductions:
-- On LBRACKET
--   reduce production list(classe) -> classe list(classe)

